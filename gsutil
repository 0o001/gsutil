#!/usr/bin/env python
# coding=utf8
# Copyright 2011 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Google Cloud Storage command line front end.

   This script automatically removes user credentials from 
   debugging/trace output. If the user selects any form of debug 
   output, it pipes the output from the real gsutil.py command 
   through a script that hides user credentials from the output. 
   If the user doesn't request a debug trace, the gsutil.py 
   command is run without any special output filtering."""

import sys
import os
import subprocess
import re

# For debugging the front end itself, primarily for gsutil developer use.
DEBUG_FRONTEND_ARG = '-x'
NO_SANITIZE_ARG = '-n'
debug_frontend = False
sanitize = True

# Enumerate the set of gsutil args that require credential sanitizing.
gsutil_debug_args = set(['-d', '-D', '-DD'])

# Set command names, save args and path to gsutil command.
py_cmd   = 'python'
san_cmd  = 'gslib/gsutil_sanitize.py'
cmd_name = 'gslib/gsutil.py'
cmd_args = sys.argv[1:]
cmd_args_set = set(cmd_args)
cmd_path = os.path.realpath(sys.path[0])

if DEBUG_FRONTEND_ARG in cmd_args_set:
  # User requested front-end debugging, i.e. display subprocess cmd.
  debug_frontend = True
  cmd_args.remove(DEBUG_FRONTEND_ARG)

if NO_SANITIZE_ARG in cmd_args_set:
  # User requested no credential sanitizing of debug data.
  # don't remove this arg so gsutil.py knows to insert warning
  sanitize = False

# assemble command lines 
args = ''
for i in cmd_args:
  if re.search('\s', i):
    # arguments containing whitespace need to be quoted
    args += '"' + i + '" '
  else:
    args += i + ' ' 

cmd1 = py_cmd + ' ' + os.path.join(cmd_path, cmd_name) + ' ' + args
cmd2 = py_cmd + ' ' + os.path.join(cmd_path, san_cmd)

if sanitize and cmd_args_set.intersection(gsutil_debug_args):
  # If gsutil debugging args present, build cmd to sanitize credentials.
  # Use 2>&1 to make sure the sanitize tool sees both stdout and stderr.
  cmd = cmd1 + ' 2>&1 | ' + cmd2
else:
  cmd = cmd1

# Display subprocess command, if requested.
if debug_frontend:
  print 'cmd: ', cmd 
  sys.stdout.flush()

# Finally, run the command in a subprocess, with shell interpretation.
ret = subprocess.call(cmd, shell=True)
exit(ret)

